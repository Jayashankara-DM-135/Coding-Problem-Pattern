Algorithm Tips for Modified Binaray search:

1> Finding mid for Binary search:
a> Works fine for Python. Since does not have any interger overflow as such.
But it might give problem in c++ and Java.
mid = (start + end) // 2

b> Below formuala works most widely used one.
mid = start + ((end - start) // 2)

=========================================

2> Binary search for sorted matrix:
Note: For calacuting row and colums, use cloum size (n in m*n, where m = no. rows
 and n = no colums)
Code:

        left, right = 0, m * n - 1
        while left <= right:
                pivot_idx = (left + (right - left)) // 2
                pivot_element = matrix[pivot_idx // n][pivot_idx % n]
                if target == pivot_element:
                    return True
                else:
                    if target < pivot_element:
                        right = pivot_idx - 1
                    else:
                        left = pivot_idx + 1
        return False
===================================================
3> Search in Sorted Rotated array:
   a> Find mid and compare with key
   b> Since only one elemement arr[i] having a[i] < a[i-1] property in sorted rotated array
      and rest of elements a[i] > a[i-1]
      We will have at least one side sorted (some cases both side is sorted), We need to
      find the sorted part by comparing if arr[start] <= arr[mid]: and
      then check value is belong in sorted range or not.
code:
      start, end = 0, len(nums)-1
        while start <= end:
            mid = start + (end - start) // 2
            if target == nums[mid]:
                return mid

            if nums[start] <= nums[mid]:
                if target >= nums[start] and target < nums[mid]:
                    end = mid - 1
                else:
                    start = mid + 1
            else:
                if target > nums[mid] and target <= nums[end]:
                    start = mid + 1
                else:
                    end = mid - 1

        return -1
=========================================================

4> Finding minimum in Rotated sorted array:

Algorithm:

Find the mid element of the array.
if arr[mid] > arr[mid+1]: return arr[mid+1]
otherwise
If mid element > first element of array this means that we need to look for the inflection(smallest value) point on the right of mid.

If mid element < first element of array this that we need to look for the inflection point on the left of mid.

Code:
        start = 0
        end = len(nums) - 1

        while start < end:
            mid = start + ((end - start) // 2)

            if nums[mid] > nums[mid +1]:
                return nums[mid + 1]

            if nums[mid] < nums[end]:
                end = mid
            else:
                start = mid + 1

        return nums[start]

=======================================================
5> Search in a Sorted Array of Unknown Size:

This problem involues two step:
a> First find boundary in which given key is present, then
b> Do Binary search

Algorithm
----------
a> Define boundaries:

Initiate left = 0 and right = 1.

While target is on the right to the right boundary: reader.get(right) < target:

Set left boundary equal to the right one: left = right + 1.

Extend right boundary: right = (right - left) * 2 + high + 1 .

Note: To speed up, use right shift operator (x << 1)instead of multiplication.

Now the target is between left and right boundaries.

Code:
        low = 0
        high = 1

        while target > reader.get(high):
            newlow = high + 1
            high = (high - low) * 2 + high + 1
            low = newlow
            print(low, high)

        while low <= high:
           //Binary search code
=========================================
6 > Peak Index in a Mountain Array:

Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i] and
arr[i] > arr[i+1] > ... > arr[arr.length - 1]

Code:
        low = 0
        high = len(arr) - 1

        while low < high:
            mid = low + (high - low) // 2

            if arr[mid] > arr[mid+1]:
                high = mid
            else:
                low = mid + 1

        return low

====================================
7> Given a characters array letters that is sorted in non-decreasing order and
a character target, return the smallest character in the array that is larger than
target.

Note that the letters wrap around.
For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'

code:

def search_next_letter(letters, key):
  n = len(letters)
  if key < letters[0] or key > letters[n - 1]:
    return letters[0]

  start, end = 0, n - 1
  while start <= end:
    mid = start + (end - start) // 2
    if key < letters[mid]:
      end = mid - 1
    else: # key >= letters[mid]:
      start = mid + 1


  return letters[start % n]



