Algorithm Tips for Modified Binaray search:

1> Finding mid for Binary search:
a> Works fine for Python. Since does not have any interger overflow as such.
But it might give problem in c++ and Java.
mid = (start + end) // 2

b> Below formuala works most widely used one.
mid = start + ((end - start) // 2)

=========================================

2> Binary search for sorted matrix:
Note: For calacuting row and colums, use cloum size (n in m*n, where m = no. rows
 and n = no colums)
Code:

        left, right = 0, m * n - 1
        while left <= right:
                pivot_idx = (left + (right - left)) // 2
                pivot_element = matrix[pivot_idx // n][pivot_idx % n]
                if target == pivot_element:
                    return True
                else:
                    if target < pivot_element:
                        right = pivot_idx - 1
                    else:
                        left = pivot_idx + 1
        return False
===================================================
3> Search in Sorted Rotated array:
   a> Find mid and compare with key
   b> Since only one elemement arr[i] having a[i] < a[i-1] property in sorted rotated array
      and rest of elements a[i] > a[i-1]
      We will have at least one side sorted (some cases both side is sorted), We need to
      find the sorted part by comparing if arr[start] <= arr[mid]: and
      then check value is belong in sorted range or not.
code:
      start, end = 0, len(nums)-1
        while start <= end:
            mid = start + (end - start) // 2
            if target == nums[mid]:
                return mid

            if nums[start] <= nums[mid]:
                if target >= nums[start] and target < nums[mid]:
                    end = mid - 1
                else:
                    start = mid + 1
            else:
                if target > nums[mid] and target <= nums[end]:
                    start = mid + 1
                else:
                    end = mid - 1

        return -1
=========================================================







